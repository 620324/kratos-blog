// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.25.1
// source: blog.proto

package blog

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBlogCreateBlog = "/api.v1.Blog/CreateBlog"
const OperationBlogDeleteBlog = "/api.v1.Blog/DeleteBlog"
const OperationBlogGetBlogByID = "/api.v1.Blog/GetBlogByID"
const OperationBlogGetBlogByTag = "/api.v1.Blog/GetBlogByTag"
const OperationBlogGetBlogByTitle = "/api.v1.Blog/GetBlogByTitle"
const OperationBlogListBlog = "/api.v1.Blog/ListBlog"
const OperationBlogUpdateAllCommentStatus = "/api.v1.Blog/UpdateAllCommentStatus"
const OperationBlogUpdateAllowComment = "/api.v1.Blog/UpdateAllowComment"
const OperationBlogUpdateAppear = "/api.v1.Blog/UpdateAppear"
const OperationBlogUpdateBlog = "/api.v1.Blog/UpdateBlog"

type BlogHTTPServer interface {
	CreateBlog(context.Context, *CreateBlogRequest) (*CreateBlogReply, error)
	DeleteBlog(context.Context, *DeleteBlogRequest) (*DeleteBlogReply, error)
	GetBlogByID(context.Context, *GetBlogIDRequest) (*GetBlogIDReply, error)
	GetBlogByTag(context.Context, *GetBlogRequest) (*GetBlogReply, error)
	GetBlogByTitle(context.Context, *GetBlogByTitleRequest) (*GetBlogByTitleReply, error)
	ListBlog(context.Context, *ListBlogRequest) (*ListBlogReply, error)
	UpdateAllCommentStatus(context.Context, *UpdateAllCommentStatusRequest) (*UpdateAllCommentStatusReply, error)
	UpdateAllowComment(context.Context, *UpdateAllowRequest) (*UpdateAllowReply, error)
	UpdateAppear(context.Context, *UpdateAllowRequest) (*UpdateAllowReply, error)
	UpdateBlog(context.Context, *UpdateBlogRequest) (*UpdateBlogReply, error)
}

func RegisterBlogHTTPServer(s *http.Server, srv BlogHTTPServer) {
	r := s.Route("/")
	r.POST("/api/addBlog", _Blog_CreateBlog0_HTTP_Handler(srv))
	r.PUT("/api/updateBlog/{id}", _Blog_UpdateBlog0_HTTP_Handler(srv))
	r.PUT("/api/updateAllBlogStatus/{status}", _Blog_UpdateAllCommentStatus0_HTTP_Handler(srv))
	r.DELETE("/api/deleteBlog/{id}/{key}", _Blog_DeleteBlog0_HTTP_Handler(srv))
	r.GET("/api/getTagName/{tag}", _Blog_GetBlogByTag0_HTTP_Handler(srv))
	r.GET("/api/getAllBlog", _Blog_ListBlog0_HTTP_Handler(srv))
	r.GET("/api/getId/{id}", _Blog_GetBlogByID0_HTTP_Handler(srv))
	r.GET("/api/searchBlog/{title}", _Blog_GetBlogByTitle0_HTTP_Handler(srv))
	r.PUT("/api/updateAllow", _Blog_UpdateAllowComment0_HTTP_Handler(srv))
	r.PUT("/api/updateAppear", _Blog_UpdateAppear0_HTTP_Handler(srv))
}

func _Blog_CreateBlog0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBlogRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogCreateBlog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBlog(ctx, req.(*CreateBlogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateBlogReply)
		return ctx.Result(200, reply)
	}
}

func _Blog_UpdateBlog0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBlogRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogUpdateBlog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBlog(ctx, req.(*UpdateBlogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateBlogReply)
		return ctx.Result(200, reply)
	}
}

func _Blog_UpdateAllCommentStatus0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAllCommentStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogUpdateAllCommentStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAllCommentStatus(ctx, req.(*UpdateAllCommentStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAllCommentStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Blog_DeleteBlog0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBlogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogDeleteBlog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBlog(ctx, req.(*DeleteBlogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteBlogReply)
		return ctx.Result(200, reply)
	}
}

func _Blog_GetBlogByTag0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBlogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogGetBlogByTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBlogByTag(ctx, req.(*GetBlogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBlogReply)
		return ctx.Result(200, reply)
	}
}

func _Blog_ListBlog0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBlogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogListBlog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBlog(ctx, req.(*ListBlogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBlogReply)
		return ctx.Result(200, reply)
	}
}

func _Blog_GetBlogByID0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBlogIDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogGetBlogByID)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBlogByID(ctx, req.(*GetBlogIDRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBlogIDReply)
		return ctx.Result(200, reply)
	}
}

func _Blog_GetBlogByTitle0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBlogByTitleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogGetBlogByTitle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBlogByTitle(ctx, req.(*GetBlogByTitleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBlogByTitleReply)
		return ctx.Result(200, reply)
	}
}

func _Blog_UpdateAllowComment0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAllowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogUpdateAllowComment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAllowComment(ctx, req.(*UpdateAllowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAllowReply)
		return ctx.Result(200, reply)
	}
}

func _Blog_UpdateAppear0_HTTP_Handler(srv BlogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAllowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlogUpdateAppear)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAppear(ctx, req.(*UpdateAllowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAllowReply)
		return ctx.Result(200, reply)
	}
}

type BlogHTTPClient interface {
	CreateBlog(ctx context.Context, req *CreateBlogRequest, opts ...http.CallOption) (rsp *CreateBlogReply, err error)
	DeleteBlog(ctx context.Context, req *DeleteBlogRequest, opts ...http.CallOption) (rsp *DeleteBlogReply, err error)
	GetBlogByID(ctx context.Context, req *GetBlogIDRequest, opts ...http.CallOption) (rsp *GetBlogIDReply, err error)
	GetBlogByTag(ctx context.Context, req *GetBlogRequest, opts ...http.CallOption) (rsp *GetBlogReply, err error)
	GetBlogByTitle(ctx context.Context, req *GetBlogByTitleRequest, opts ...http.CallOption) (rsp *GetBlogByTitleReply, err error)
	ListBlog(ctx context.Context, req *ListBlogRequest, opts ...http.CallOption) (rsp *ListBlogReply, err error)
	UpdateAllCommentStatus(ctx context.Context, req *UpdateAllCommentStatusRequest, opts ...http.CallOption) (rsp *UpdateAllCommentStatusReply, err error)
	UpdateAllowComment(ctx context.Context, req *UpdateAllowRequest, opts ...http.CallOption) (rsp *UpdateAllowReply, err error)
	UpdateAppear(ctx context.Context, req *UpdateAllowRequest, opts ...http.CallOption) (rsp *UpdateAllowReply, err error)
	UpdateBlog(ctx context.Context, req *UpdateBlogRequest, opts ...http.CallOption) (rsp *UpdateBlogReply, err error)
}

type BlogHTTPClientImpl struct {
	cc *http.Client
}

func NewBlogHTTPClient(client *http.Client) BlogHTTPClient {
	return &BlogHTTPClientImpl{client}
}

func (c *BlogHTTPClientImpl) CreateBlog(ctx context.Context, in *CreateBlogRequest, opts ...http.CallOption) (*CreateBlogReply, error) {
	var out CreateBlogReply
	pattern := "/api/addBlog"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogCreateBlog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogHTTPClientImpl) DeleteBlog(ctx context.Context, in *DeleteBlogRequest, opts ...http.CallOption) (*DeleteBlogReply, error) {
	var out DeleteBlogReply
	pattern := "/api/deleteBlog/{id}/{key}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogDeleteBlog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogHTTPClientImpl) GetBlogByID(ctx context.Context, in *GetBlogIDRequest, opts ...http.CallOption) (*GetBlogIDReply, error) {
	var out GetBlogIDReply
	pattern := "/api/getId/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogGetBlogByID))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogHTTPClientImpl) GetBlogByTag(ctx context.Context, in *GetBlogRequest, opts ...http.CallOption) (*GetBlogReply, error) {
	var out GetBlogReply
	pattern := "/api/getTagName/{tag}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogGetBlogByTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogHTTPClientImpl) GetBlogByTitle(ctx context.Context, in *GetBlogByTitleRequest, opts ...http.CallOption) (*GetBlogByTitleReply, error) {
	var out GetBlogByTitleReply
	pattern := "/api/searchBlog/{title}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogGetBlogByTitle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogHTTPClientImpl) ListBlog(ctx context.Context, in *ListBlogRequest, opts ...http.CallOption) (*ListBlogReply, error) {
	var out ListBlogReply
	pattern := "/api/getAllBlog"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlogListBlog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogHTTPClientImpl) UpdateAllCommentStatus(ctx context.Context, in *UpdateAllCommentStatusRequest, opts ...http.CallOption) (*UpdateAllCommentStatusReply, error) {
	var out UpdateAllCommentStatusReply
	pattern := "/api/updateAllBlogStatus/{status}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogUpdateAllCommentStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogHTTPClientImpl) UpdateAllowComment(ctx context.Context, in *UpdateAllowRequest, opts ...http.CallOption) (*UpdateAllowReply, error) {
	var out UpdateAllowReply
	pattern := "/api/updateAllow"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogUpdateAllowComment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogHTTPClientImpl) UpdateAppear(ctx context.Context, in *UpdateAllowRequest, opts ...http.CallOption) (*UpdateAllowReply, error) {
	var out UpdateAllowReply
	pattern := "/api/updateAppear"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogUpdateAppear))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogHTTPClientImpl) UpdateBlog(ctx context.Context, in *UpdateBlogRequest, opts ...http.CallOption) (*UpdateBlogReply, error) {
	var out UpdateBlogReply
	pattern := "/api/updateBlog/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlogUpdateBlog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
