// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: blog.proto

package blog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Blog_CreateBlog_FullMethodName             = "/api.v1.Blog/CreateBlog"
	Blog_UpdateBlog_FullMethodName             = "/api.v1.Blog/UpdateBlog"
	Blog_UpdateAllCommentStatus_FullMethodName = "/api.v1.Blog/UpdateAllCommentStatus"
	Blog_DeleteBlog_FullMethodName             = "/api.v1.Blog/DeleteBlog"
	Blog_GetBlogByTag_FullMethodName           = "/api.v1.Blog/GetBlogByTag"
	Blog_ListBlog_FullMethodName               = "/api.v1.Blog/ListBlog"
	Blog_GetBlogByID_FullMethodName            = "/api.v1.Blog/GetBlogByID"
	Blog_GetBlogByTitle_FullMethodName         = "/api.v1.Blog/GetBlogByTitle"
	Blog_UpdateAllowComment_FullMethodName     = "/api.v1.Blog/UpdateAllowComment"
	Blog_UpdateAppear_FullMethodName           = "/api.v1.Blog/UpdateAppear"
)

// BlogClient is the client API for Blog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogClient interface {
	CreateBlog(ctx context.Context, in *CreateBlogRequest, opts ...grpc.CallOption) (*CreateBlogReply, error)
	UpdateBlog(ctx context.Context, in *UpdateBlogRequest, opts ...grpc.CallOption) (*UpdateBlogReply, error)
	UpdateAllCommentStatus(ctx context.Context, in *UpdateAllCommentStatusRequest, opts ...grpc.CallOption) (*UpdateAllCommentStatusReply, error)
	DeleteBlog(ctx context.Context, in *DeleteBlogRequest, opts ...grpc.CallOption) (*DeleteBlogReply, error)
	GetBlogByTag(ctx context.Context, in *GetBlogRequest, opts ...grpc.CallOption) (*GetBlogReply, error)
	ListBlog(ctx context.Context, in *ListBlogRequest, opts ...grpc.CallOption) (*ListBlogReply, error)
	GetBlogByID(ctx context.Context, in *GetBlogIDRequest, opts ...grpc.CallOption) (*GetBlogIDReply, error)
	GetBlogByTitle(ctx context.Context, in *GetBlogByTitleRequest, opts ...grpc.CallOption) (*GetBlogByTitleReply, error)
	UpdateAllowComment(ctx context.Context, in *UpdateAllowRequest, opts ...grpc.CallOption) (*UpdateAllowReply, error)
	UpdateAppear(ctx context.Context, in *UpdateAllowRequest, opts ...grpc.CallOption) (*UpdateAllowReply, error)
}

type blogClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogClient(cc grpc.ClientConnInterface) BlogClient {
	return &blogClient{cc}
}

func (c *blogClient) CreateBlog(ctx context.Context, in *CreateBlogRequest, opts ...grpc.CallOption) (*CreateBlogReply, error) {
	out := new(CreateBlogReply)
	err := c.cc.Invoke(ctx, Blog_CreateBlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) UpdateBlog(ctx context.Context, in *UpdateBlogRequest, opts ...grpc.CallOption) (*UpdateBlogReply, error) {
	out := new(UpdateBlogReply)
	err := c.cc.Invoke(ctx, Blog_UpdateBlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) UpdateAllCommentStatus(ctx context.Context, in *UpdateAllCommentStatusRequest, opts ...grpc.CallOption) (*UpdateAllCommentStatusReply, error) {
	out := new(UpdateAllCommentStatusReply)
	err := c.cc.Invoke(ctx, Blog_UpdateAllCommentStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) DeleteBlog(ctx context.Context, in *DeleteBlogRequest, opts ...grpc.CallOption) (*DeleteBlogReply, error) {
	out := new(DeleteBlogReply)
	err := c.cc.Invoke(ctx, Blog_DeleteBlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetBlogByTag(ctx context.Context, in *GetBlogRequest, opts ...grpc.CallOption) (*GetBlogReply, error) {
	out := new(GetBlogReply)
	err := c.cc.Invoke(ctx, Blog_GetBlogByTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) ListBlog(ctx context.Context, in *ListBlogRequest, opts ...grpc.CallOption) (*ListBlogReply, error) {
	out := new(ListBlogReply)
	err := c.cc.Invoke(ctx, Blog_ListBlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetBlogByID(ctx context.Context, in *GetBlogIDRequest, opts ...grpc.CallOption) (*GetBlogIDReply, error) {
	out := new(GetBlogIDReply)
	err := c.cc.Invoke(ctx, Blog_GetBlogByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) GetBlogByTitle(ctx context.Context, in *GetBlogByTitleRequest, opts ...grpc.CallOption) (*GetBlogByTitleReply, error) {
	out := new(GetBlogByTitleReply)
	err := c.cc.Invoke(ctx, Blog_GetBlogByTitle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) UpdateAllowComment(ctx context.Context, in *UpdateAllowRequest, opts ...grpc.CallOption) (*UpdateAllowReply, error) {
	out := new(UpdateAllowReply)
	err := c.cc.Invoke(ctx, Blog_UpdateAllowComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogClient) UpdateAppear(ctx context.Context, in *UpdateAllowRequest, opts ...grpc.CallOption) (*UpdateAllowReply, error) {
	out := new(UpdateAllowReply)
	err := c.cc.Invoke(ctx, Blog_UpdateAppear_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogServer is the server API for Blog service.
// All implementations must embed UnimplementedBlogServer
// for forward compatibility
type BlogServer interface {
	CreateBlog(context.Context, *CreateBlogRequest) (*CreateBlogReply, error)
	UpdateBlog(context.Context, *UpdateBlogRequest) (*UpdateBlogReply, error)
	UpdateAllCommentStatus(context.Context, *UpdateAllCommentStatusRequest) (*UpdateAllCommentStatusReply, error)
	DeleteBlog(context.Context, *DeleteBlogRequest) (*DeleteBlogReply, error)
	GetBlogByTag(context.Context, *GetBlogRequest) (*GetBlogReply, error)
	ListBlog(context.Context, *ListBlogRequest) (*ListBlogReply, error)
	GetBlogByID(context.Context, *GetBlogIDRequest) (*GetBlogIDReply, error)
	GetBlogByTitle(context.Context, *GetBlogByTitleRequest) (*GetBlogByTitleReply, error)
	UpdateAllowComment(context.Context, *UpdateAllowRequest) (*UpdateAllowReply, error)
	UpdateAppear(context.Context, *UpdateAllowRequest) (*UpdateAllowReply, error)
	mustEmbedUnimplementedBlogServer()
}

// UnimplementedBlogServer must be embedded to have forward compatible implementations.
type UnimplementedBlogServer struct {
}

func (UnimplementedBlogServer) CreateBlog(context.Context, *CreateBlogRequest) (*CreateBlogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlog not implemented")
}
func (UnimplementedBlogServer) UpdateBlog(context.Context, *UpdateBlogRequest) (*UpdateBlogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlog not implemented")
}
func (UnimplementedBlogServer) UpdateAllCommentStatus(context.Context, *UpdateAllCommentStatusRequest) (*UpdateAllCommentStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllCommentStatus not implemented")
}
func (UnimplementedBlogServer) DeleteBlog(context.Context, *DeleteBlogRequest) (*DeleteBlogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlog not implemented")
}
func (UnimplementedBlogServer) GetBlogByTag(context.Context, *GetBlogRequest) (*GetBlogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogByTag not implemented")
}
func (UnimplementedBlogServer) ListBlog(context.Context, *ListBlogRequest) (*ListBlogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlog not implemented")
}
func (UnimplementedBlogServer) GetBlogByID(context.Context, *GetBlogIDRequest) (*GetBlogIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogByID not implemented")
}
func (UnimplementedBlogServer) GetBlogByTitle(context.Context, *GetBlogByTitleRequest) (*GetBlogByTitleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogByTitle not implemented")
}
func (UnimplementedBlogServer) UpdateAllowComment(context.Context, *UpdateAllowRequest) (*UpdateAllowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllowComment not implemented")
}
func (UnimplementedBlogServer) UpdateAppear(context.Context, *UpdateAllowRequest) (*UpdateAllowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppear not implemented")
}
func (UnimplementedBlogServer) mustEmbedUnimplementedBlogServer() {}

// UnsafeBlogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogServer will
// result in compilation errors.
type UnsafeBlogServer interface {
	mustEmbedUnimplementedBlogServer()
}

func RegisterBlogServer(s grpc.ServiceRegistrar, srv BlogServer) {
	s.RegisterService(&Blog_ServiceDesc, srv)
}

func _Blog_CreateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).CreateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blog_CreateBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).CreateBlog(ctx, req.(*CreateBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_UpdateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).UpdateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blog_UpdateBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).UpdateBlog(ctx, req.(*UpdateBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_UpdateAllCommentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAllCommentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).UpdateAllCommentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blog_UpdateAllCommentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).UpdateAllCommentStatus(ctx, req.(*UpdateAllCommentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_DeleteBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).DeleteBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blog_DeleteBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).DeleteBlog(ctx, req.(*DeleteBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_GetBlogByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).GetBlogByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blog_GetBlogByTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).GetBlogByTag(ctx, req.(*GetBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_ListBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).ListBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blog_ListBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).ListBlog(ctx, req.(*ListBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_GetBlogByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).GetBlogByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blog_GetBlogByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).GetBlogByID(ctx, req.(*GetBlogIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_GetBlogByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogByTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).GetBlogByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blog_GetBlogByTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).GetBlogByTitle(ctx, req.(*GetBlogByTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_UpdateAllowComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAllowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).UpdateAllowComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blog_UpdateAllowComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).UpdateAllowComment(ctx, req.(*UpdateAllowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blog_UpdateAppear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAllowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServer).UpdateAppear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blog_UpdateAppear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServer).UpdateAppear(ctx, req.(*UpdateAllowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Blog_ServiceDesc is the grpc.ServiceDesc for Blog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Blog",
	HandlerType: (*BlogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlog",
			Handler:    _Blog_CreateBlog_Handler,
		},
		{
			MethodName: "UpdateBlog",
			Handler:    _Blog_UpdateBlog_Handler,
		},
		{
			MethodName: "UpdateAllCommentStatus",
			Handler:    _Blog_UpdateAllCommentStatus_Handler,
		},
		{
			MethodName: "DeleteBlog",
			Handler:    _Blog_DeleteBlog_Handler,
		},
		{
			MethodName: "GetBlogByTag",
			Handler:    _Blog_GetBlogByTag_Handler,
		},
		{
			MethodName: "ListBlog",
			Handler:    _Blog_ListBlog_Handler,
		},
		{
			MethodName: "GetBlogByID",
			Handler:    _Blog_GetBlogByID_Handler,
		},
		{
			MethodName: "GetBlogByTitle",
			Handler:    _Blog_GetBlogByTitle_Handler,
		},
		{
			MethodName: "UpdateAllowComment",
			Handler:    _Blog_UpdateAllowComment_Handler,
		},
		{
			MethodName: "UpdateAppear",
			Handler:    _Blog_UpdateAppear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}
