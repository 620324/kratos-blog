// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"kratos-blog/app/comment/internal/biz"
	"kratos-blog/app/comment/internal/conf"
	"kratos-blog/app/comment/internal/data"
	"kratos-blog/app/comment/internal/server"
	"kratos-blog/app/comment/internal/service"
	db2 "kratos-blog/pkg/db"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confData *conf.Bootstrap, registry *conf.Registry, logger log.Logger) (*kratos.App, func(), error) {
	r := db2.NewRegistrar(registry.Consul.Address, registry.Consul.Scheme)
	db := db2.NewDB(confData.Data.Database.Source)
	rdb := db2.NewRDB(confData.Data.Redis.Addr, confData.Data.Redis.Password, confData.Data.Redis.Db)
	dataData, err := data.NewData(confData, logger, db, rdb)
	if err != nil {
		return nil, nil, err
	}
	sensitiveList := data.QueryWords(db)
	commRepo := data.NewCommRepo(dataData, logger, sensitiveList)
	commUsecase := biz.NewUCommUseCase(commRepo, logger)
	commService := service.NewCommentService(commUsecase)
	grpcServer := server.NewGRPCServer(confData.Server, commService, logger)
	httpServer := server.NewHTTPServer(confData.Server, commService, logger)
	app := newApp(logger, grpcServer, httpServer, r)
	return app, func() {
	}, nil
}
