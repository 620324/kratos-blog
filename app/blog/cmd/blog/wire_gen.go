// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"kratos-blog/app/blog/internal/biz"
	"kratos-blog/app/blog/internal/conf"
	"kratos-blog/app/blog/internal/data"
	"kratos-blog/app/blog/internal/server"
	"kratos-blog/app/blog/internal/service"
	db2 "kratos-blog/pkg/db"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(conf *conf.Bootstrap, registry *conf.Registry, logger log.Logger) (*kratos.App, func(), error) {
	r := db2.NewRegistrar(registry.Consul.Address, registry.Consul.Scheme)
	db := db2.NewDB(conf.Data.Database.Source)
	rdb := db2.NewRDB(conf.Data.Redis.Addr, conf.Data.Redis.Password, conf.Data.Redis.Db)
	dataData, err := data.NewData(conf, logger, db, rdb)
	if err != nil {
		return nil, nil, err
	}
	blogRepo := data.NewBlogRepo(dataData, logger)
	blogUsecase := biz.NewBlogUseCase(blogRepo, logger)
	blogService := service.NewBlogService(blogUsecase)
	tagRepo := data.NewTagRepo(dataData, logger)
	tagUseCase := biz.NewTagUseCase(tagRepo, logger)
	tagService := service.NewTagService(tagUseCase)
	friendRepo := data.NewFriendRepo(dataData, logger)
	friendUseCase := biz.NewFriendUseCase(friendRepo, logger)
	friendService := service.NewFriendService(friendUseCase)
	photoRepo := data.NewPhotoRepo(dataData, logger)
	photoUseCase := biz.NewPhotoUseCase(photoRepo, logger)
	photoService := service.NewPhotoService(photoUseCase)
	grpcServer := server.NewGRPCServer(conf.Server, blogService, friendService, tagService, photoService, logger)
	httpServer := server.NewHTTPServer(conf, blogService, friendService, tagService)
	app := newApp(logger, grpcServer, httpServer, r)
	return app, func() {
	}, nil
}
